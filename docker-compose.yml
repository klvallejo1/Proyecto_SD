# docker-compose.yml
version: '3'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "pedidos:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper

  mysql:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: pedidos_db
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 5s
      timeout: 5s
      retries: 10

  api:
    build: ./api
    ports:
      - "5000:5000"
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
    command: ["flask", "run", "--host=0.0.0.0"]
    restart: on-failure

  consumer:
    build: ./consumer
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started
    restart: on-failure

  dashboard:
    build: ./dashboard
    ports:
      - "5001:5001"
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
    command: ["flask", "run", "--host=0.0.0.0", "--port=5001"]
    restart: on-failure

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
      - dashboard
    restart: on-failure

volumes:
  mysql_data: